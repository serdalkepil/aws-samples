# create your cloud9 instance with default settings. 

# update aws CLI

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

# install kubectl 

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl


# install eksctl 

ARCH=amd64
PLATFORM=$(uname -s)_$ARCH
curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
# Verify checksum
curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm -f eksctl_$PLATFORM.tar.gz
sudo mv /tmp/eksctl /usr/local/bin

# after prerequisites install 

kubectl version
aws --version
eksctl version


# https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html


# Create IAM resources 

# Create role EKSClusterCreator from console with trust EC2 service  with Administrator Policy
# Create role EKSClusterRole from console with trust EKS-Cluster service with AmazonEKSClusterPolicy


# Copy the following contents to a file named eks-cluster-role-trust-policy.json.

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
Create the role.

# create IAM role using AWS CLI 
aws iam create-role \
  --role-name myAmazonEKSClusterRole \
  --assume-role-policy-document file://"eks-cluster-role-trust-policy.json"
Attach the required Amazon EKS managed IAM policy to the role.

# attach IAM policy to created role 
aws iam attach-role-policy \
  --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy \
  --role-name myAmazonEKSClusterRole

# Create Netwoking VPC resources 

# Create VPC - CloudFormation Template @ https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml

aws cloudformation create-stack \
  --region region-code \
  --stack-name my-eks-vpc-stack \
  --template-url https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml


# Create EKS Cluster

# Use the console to create the cluster.
# Use deployed VPC and  Select all subnets for worker nodes
# Create Public and Private endpoint API Server


# Return your Cloud9 Instance

# Open the Cloud9 Instance over AWS Console

aws eks list-clusters
aws eks update-kubeconfig --region eu-west-1 --name MyCluster

aws sts get-caller-identity

# Run following commands with kubectl tool

kubectl get nodes
kubectl api-resources
kubectl get pods
kubectl get services

# Update Cloud9 EC2 Instance role with EKSClusterCreator role, and disable AWS temp. permission settings from Cloud9 Settings.

# Create IAM EKSNodesECC2AutoScalingPolicy with following policy over Web Console

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:DescribeLaunchConfigurations",
        "autoscaling:DescribeScalingActivities",
        "autoscaling:DescribeTags",
        "ec2:DescribeInstanceTypes",
        "ec2:DescribeLaunchTemplateVersions"
      ],
      "Resource": ["*"]
    },
    {
      "Effect": "Allow",
      "Action": [
        "autoscaling:SetDesiredCapacity",
        "autoscaling:TerminateInstanceInAutoScalingGroup",
        "ec2:DescribeImages",
        "ec2:GetInstanceTypesFromInstanceRequirements",
        "eks:DescribeNodegroup"
      ],
      "Resource": ["*"]
    }
  ]
}

# IAM Create new role for Worker nodes 
# On IAM service select managed policies EKSWorkerNodePolicy, EKS_CNI_Policy, EC2ContainerREgistryREadOnly and newly created EKSNodesECC2AutoScalingPolicy

# then create IAM role EKSClusterNodeRole (totally 4 policies)

# next step deploy a worker node group 

# Enter AWS Console EKS page, select your cluster 
# Deploy a node group to the cluster over console, using Managed Node Groups. 
# Use the role previously created for worker nodes.
# Select only private subnets for worker nodes.


# Return back to Cloud9 
# Create deployment.yaml file as follows 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-nodejs-deployment
  namespace: eks-nodejs-app
  labels:
    app: eks-nodejs-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: eks-nodejs-app
  template:
    metadata:
      labels:
        app: eks-nodejs-app
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      containers:
      - name: nodejs-app
        image: 029916934188.dkr.ecr.eu-west-1.amazonaws.com/test:latest
        ports:
        - name: http
          containerPort: 8080
        imagePullPolicy: IfNotPresent
      nodeSelector:
        kubernetes.io/os: linux

# then deploy the using kubectl apply

kubectl apply â€“f deployment.yaml

# then check the nodes and pods

kubectl get nodes,pods -n eks-nodejs-app

